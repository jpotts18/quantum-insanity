import Foundation
import AlamoFire

class Network<%= @net["name"].capitalize %>Provider {

    let endpoint:String = "http://private-eb2c3-mockpyur.apiary-mock.com/requests"
    
    typealias CollectionReponse = (NSError?, [<%= @net["name"].capitalize %>]?) -> Void
    typealias ItemResponse = (NSError?, <%= @net["name"].capitalize %>?) -> Void
    
    <% if @net["methods"]["all"] %>
    class func getAll(onCompletion: CollectionReponse) {
        Alamofire.request(.GET, endpoint + "/requests")
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                    // marshal JSON
                    onCompletion(nil, requests)
                }
    }<% end %><% if @net["methods"]["read"] %>
    class func get(id: Int, onCompletion: ItemResponse) {
        Alamofire.request(.GET, endpoint + "/requests/" + id)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                    // marshal JSON
                    onCompletion(nil, requests)
                }
    }<% end %><% if @net["methods"]["update"] %>
    class func update(id: Int, <%= @net["name"].downcase %>: <%= @net["name"].capitalize %>,  onCompletion: ItemResponse) {
        Alamofire.request(.PUT, endpoint + "/requests/" + id, parameters: <%= @net["name"].downcase %>, encoding: .JSON)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                // marshal JSON
                onCompletion(nil, requests)
        }
    }<% end %><% if @net["methods"]["delete"] %>
     class func delete(id: Int, onCompletion: ItemResponse) {
        Alamofire.request(.DELETE, endpoint + "/requests/" + id, parameters: <%= @net["name"].downcase %>, encoding: .JSON)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                // marshal JSON
                onCompletion(nil, requests)
        }
    }<% end %>
}

