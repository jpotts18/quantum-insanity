import Foundation
import AlamoFire

class Network<%= @net["name"].capitalize %>Provider {
    <% if @net["methods"]["create"] %>
    class func create(onCompletion: CollectionReponse) {
        Alamofire.request(.GET, BASE_URL + "<%= @net["endpoint"].downcase %>")
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                    onCompletion(nil, requests)
                }
    }<% end %><% if @net["methods"]["read"] %>
    class func read(id: Int, onCompletion: ItemResponse) {
        Alamofire.request(.GET, BASE_URL + "<%= @net["endpoint"].downcase %>/" + id)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                    onCompletion(nil, requests)
                }
    }<% end %><% if @net["methods"]["update"] %>
    class func update(id: Int, <%= @net["name"].downcase %>: <%= @net["name"].capitalize %>,  onCompletion: ItemResponse) {
        Alamofire.request(.PUT, BASE_URL + "<%= @net["endpoint"].downcase %>/" + id, parameters: <%= @net["name"].downcase %>, encoding: .JSON)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                onCompletion(nil, requests)
        }
    }<% end %><% if @net["methods"]["delete"] %>
    class func delete(id: Int, onCompletion: ItemResponse) {
        Alamofire.request(.DELETE, BASE_URL + "<%= @net["endpoint"].downcase %>/" + id, parameters: <%= @net["name"].downcase %>, encoding: .JSON)
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                onCompletion(nil, requests)
        }
    }<% end %><% if @net["methods"]["all"] %>
    class func getAll(onCompletion: CollectionReponse) {
        Alamofire.request(.GET, BASE_URL + "<%= @net["endpoint"].downcase %>")
                .responseJSON { (_, response, responseJson, error) -> Void in
                    if error != nil {
                        onCompletion(error, nil)
                    }
                    onCompletion(nil, requests)
                }
    }<% end %>
}

